# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PullingInterval(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, history: float=None, quotes: float=None, orders: float=None, positions: float=None, account_manager: float=None):  # noqa: E501
        """PullingInterval - a model defined in Swagger

        :param history: The history of this PullingInterval.  # noqa: E501
        :type history: float
        :param quotes: The quotes of this PullingInterval.  # noqa: E501
        :type quotes: float
        :param orders: The orders of this PullingInterval.  # noqa: E501
        :type orders: float
        :param positions: The positions of this PullingInterval.  # noqa: E501
        :type positions: float
        :param account_manager: The account_manager of this PullingInterval.  # noqa: E501
        :type account_manager: float
        """
        self.swagger_types = {
            'history': float,
            'quotes': float,
            'orders': float,
            'positions': float,
            'account_manager': float
        }

        self.attribute_map = {
            'history': 'history',
            'quotes': 'quotes',
            'orders': 'orders',
            'positions': 'positions',
            'account_manager': 'accountManager'
        }

        self._history = history
        self._quotes = quotes
        self._orders = orders
        self._positions = positions
        self._account_manager = account_manager

    @classmethod
    def from_dict(cls, dikt) -> 'PullingInterval':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PullingInterval of this PullingInterval.  # noqa: E501
        :rtype: PullingInterval
        """
        return util.deserialize_model(dikt, cls)

    @property
    def history(self) -> float:
        """Gets the history of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request chart real-time bar udpates. Default value is 500 ms.  # noqa: E501

        :return: The history of this PullingInterval.
        :rtype: float
        """
        return self._history

    @history.setter
    def history(self, history: float):
        """Sets the history of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request chart real-time bar udpates. Default value is 500 ms.  # noqa: E501

        :param history: The history of this PullingInterval.
        :type history: float
        """

        self._history = history

    @property
    def quotes(self) -> float:
        """Gets the quotes of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request quote udpates. Default value is 500 ms.  # noqa: E501

        :return: The quotes of this PullingInterval.
        :rtype: float
        """
        return self._quotes

    @quotes.setter
    def quotes(self, quotes: float):
        """Sets the quotes of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request quote udpates. Default value is 500 ms.  # noqa: E501

        :param quotes: The quotes of this PullingInterval.
        :type quotes: float
        """

        self._quotes = quotes

    @property
    def orders(self) -> float:
        """Gets the orders of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request orders. Default value is 500 ms.  # noqa: E501

        :return: The orders of this PullingInterval.
        :rtype: float
        """
        return self._orders

    @orders.setter
    def orders(self, orders: float):
        """Sets the orders of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request orders. Default value is 500 ms.  # noqa: E501

        :param orders: The orders of this PullingInterval.
        :type orders: float
        """

        self._orders = orders

    @property
    def positions(self) -> float:
        """Gets the positions of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request positions. Default value is 1000 ms.  # noqa: E501

        :return: The positions of this PullingInterval.
        :rtype: float
        """
        return self._positions

    @positions.setter
    def positions(self, positions: float):
        """Sets the positions of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to request positions. Default value is 1000 ms.  # noqa: E501

        :param positions: The positions of this PullingInterval.
        :type positions: float
        """

        self._positions = positions

    @property
    def account_manager(self) -> float:
        """Gets the account_manager of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to update Account Manager tables. Default value is 500 ms.  # noqa: E501

        :return: The account_manager of this PullingInterval.
        :rtype: float
        """
        return self._account_manager

    @account_manager.setter
    def account_manager(self, account_manager: float):
        """Sets the account_manager of this PullingInterval.

        Time interval in milliseconds that Trading Terminal uses to update Account Manager tables. Default value is 500 ms.  # noqa: E501

        :param account_manager: The account_manager of this PullingInterval.
        :type account_manager: float
        """

        self._account_manager = account_manager
