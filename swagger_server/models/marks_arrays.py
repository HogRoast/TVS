# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MarksArrays(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: List[float]=None, time: List[float]=None, color: List[str]=None, text: List[str]=None, label: List[str]=None, label_font_color: List[str]=None, min_size: List[float]=None):  # noqa: E501
        """MarksArrays - a model defined in Swagger

        :param id: The id of this MarksArrays.  # noqa: E501
        :type id: List[float]
        :param time: The time of this MarksArrays.  # noqa: E501
        :type time: List[float]
        :param color: The color of this MarksArrays.  # noqa: E501
        :type color: List[str]
        :param text: The text of this MarksArrays.  # noqa: E501
        :type text: List[str]
        :param label: The label of this MarksArrays.  # noqa: E501
        :type label: List[str]
        :param label_font_color: The label_font_color of this MarksArrays.  # noqa: E501
        :type label_font_color: List[str]
        :param min_size: The min_size of this MarksArrays.  # noqa: E501
        :type min_size: List[float]
        """
        self.swagger_types = {
            'id': List[float],
            'time': List[float],
            'color': List[str],
            'text': List[str],
            'label': List[str],
            'label_font_color': List[str],
            'min_size': List[float]
        }

        self.attribute_map = {
            'id': 'id',
            'time': 'time',
            'color': 'color',
            'text': 'text',
            'label': 'label',
            'label_font_color': 'labelFontColor',
            'min_size': 'minSize'
        }

        self._id = id
        self._time = time
        self._color = color
        self._text = text
        self._label = label
        self._label_font_color = label_font_color
        self._min_size = min_size

    @classmethod
    def from_dict(cls, dikt) -> 'MarksArrays':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MarksArrays of this MarksArrays.  # noqa: E501
        :rtype: MarksArrays
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> List[float]:
        """Gets the id of this MarksArrays.

        Unique identifiers of marks.  # noqa: E501

        :return: The id of this MarksArrays.
        :rtype: List[float]
        """
        return self._id

    @id.setter
    def id(self, id: List[float]):
        """Sets the id of this MarksArrays.

        Unique identifiers of marks.  # noqa: E501

        :param id: The id of this MarksArrays.
        :type id: List[float]
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def time(self) -> List[float]:
        """Gets the time of this MarksArrays.

        Bar time, unix timestamp (UTC).  # noqa: E501

        :return: The time of this MarksArrays.
        :rtype: List[float]
        """
        return self._time

    @time.setter
    def time(self, time: List[float]):
        """Sets the time of this MarksArrays.

        Bar time, unix timestamp (UTC).  # noqa: E501

        :param time: The time of this MarksArrays.
        :type time: List[float]
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def color(self) -> List[str]:
        """Gets the color of this MarksArrays.

        Mark colors.  # noqa: E501

        :return: The color of this MarksArrays.
        :rtype: List[str]
        """
        return self._color

    @color.setter
    def color(self, color: List[str]):
        """Sets the color of this MarksArrays.

        Mark colors.  # noqa: E501

        :param color: The color of this MarksArrays.
        :type color: List[str]
        """

        self._color = color

    @property
    def text(self) -> List[str]:
        """Gets the text of this MarksArrays.

        Mark popup text. HTML supported.  # noqa: E501

        :return: The text of this MarksArrays.
        :rtype: List[str]
        """
        return self._text

    @text.setter
    def text(self, text: List[str]):
        """Sets the text of this MarksArrays.

        Mark popup text. HTML supported.  # noqa: E501

        :param text: The text of this MarksArrays.
        :type text: List[str]
        """

        self._text = text

    @property
    def label(self) -> List[str]:
        """Gets the label of this MarksArrays.

        A letter to be printed on a mark. Single character.  # noqa: E501

        :return: The label of this MarksArrays.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label: List[str]):
        """Sets the label of this MarksArrays.

        A letter to be printed on a mark. Single character.  # noqa: E501

        :param label: The label of this MarksArrays.
        :type label: List[str]
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def label_font_color(self) -> List[str]:
        """Gets the label_font_color of this MarksArrays.

        Color of a letter on a mark.  # noqa: E501

        :return: The label_font_color of this MarksArrays.
        :rtype: List[str]
        """
        return self._label_font_color

    @label_font_color.setter
    def label_font_color(self, label_font_color: List[str]):
        """Sets the label_font_color of this MarksArrays.

        Color of a letter on a mark.  # noqa: E501

        :param label_font_color: The label_font_color of this MarksArrays.
        :type label_font_color: List[str]
        """

        self._label_font_color = label_font_color

    @property
    def min_size(self) -> List[float]:
        """Gets the min_size of this MarksArrays.

        Minimal size of mark (diameter, pixels).  # noqa: E501

        :return: The min_size of this MarksArrays.
        :rtype: List[float]
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size: List[float]):
        """Sets the min_size of this MarksArrays.

        Minimal size of mark (diameter, pixels).  # noqa: E501

        :param min_size: The min_size of this MarksArrays.
        :type min_size: List[float]
        """

        self._min_size = min_size
