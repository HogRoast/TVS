# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_flags import AccountFlags  # noqa: F401,E501
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, currency: str=None, currency_sign: str=None, config: AccountFlags=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param id: The id of this Account.  # noqa: E501
        :type id: str
        :param name: The name of this Account.  # noqa: E501
        :type name: str
        :param currency: The currency of this Account.  # noqa: E501
        :type currency: str
        :param currency_sign: The currency_sign of this Account.  # noqa: E501
        :type currency_sign: str
        :param config: The config of this Account.  # noqa: E501
        :type config: AccountFlags
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'currency': str,
            'currency_sign': str,
            'config': AccountFlags
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'currency': 'currency',
            'currency_sign': 'currencySign',
            'config': 'config'
        }

        self._id = id
        self._name = name
        self._currency = currency
        self._currency_sign = currency_sign
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Account.


        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Account.


        :param id: The id of this Account.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Account.

        Account title that is displayed to a user.  # noqa: E501

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Account.

        Account title that is displayed to a user.  # noqa: E501

        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def currency(self) -> str:
        """Gets the currency of this Account.

        Abbreviation of account currency.  # noqa: E501

        :return: The currency of this Account.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Account.

        Abbreviation of account currency.  # noqa: E501

        :param currency: The currency of this Account.
        :type currency: str
        """

        self._currency = currency

    @property
    def currency_sign(self) -> str:
        """Gets the currency_sign of this Account.

        Account currency symbol.  # noqa: E501

        :return: The currency_sign of this Account.
        :rtype: str
        """
        return self._currency_sign

    @currency_sign.setter
    def currency_sign(self, currency_sign: str):
        """Sets the currency_sign of this Account.

        Account currency symbol.  # noqa: E501

        :param currency_sign: The currency_sign of this Account.
        :type currency_sign: str
        """

        self._currency_sign = currency_sign

    @property
    def config(self) -> AccountFlags:
        """Gets the config of this Account.


        :return: The config of this Account.
        :rtype: AccountFlags
        """
        return self._config

    @config.setter
    def config(self, config: AccountFlags):
        """Sets the config of this Account.


        :param config: The config of this Account.
        :type config: AccountFlags
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config
