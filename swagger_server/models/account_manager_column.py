# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccountManagerColumn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, tooltip: str=None, fixed_width: bool=None, sortable: bool=None):  # noqa: E501
        """AccountManagerColumn - a model defined in Swagger

        :param id: The id of this AccountManagerColumn.  # noqa: E501
        :type id: str
        :param title: The title of this AccountManagerColumn.  # noqa: E501
        :type title: str
        :param tooltip: The tooltip of this AccountManagerColumn.  # noqa: E501
        :type tooltip: str
        :param fixed_width: The fixed_width of this AccountManagerColumn.  # noqa: E501
        :type fixed_width: bool
        :param sortable: The sortable of this AccountManagerColumn.  # noqa: E501
        :type sortable: bool
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'tooltip': str,
            'fixed_width': bool,
            'sortable': bool
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'tooltip': 'tooltip',
            'fixed_width': 'fixedWidth',
            'sortable': 'sortable'
        }

        self._id = id
        self._title = title
        self._tooltip = tooltip
        self._fixed_width = fixed_width
        self._sortable = sortable

    @classmethod
    def from_dict(cls, dikt) -> 'AccountManagerColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountManagerColumn of this AccountManagerColumn.  # noqa: E501
        :rtype: AccountManagerColumn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AccountManagerColumn.


        :return: The id of this AccountManagerColumn.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AccountManagerColumn.


        :param id: The id of this AccountManagerColumn.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this AccountManagerColumn.

        Localized title of a column.  # noqa: E501

        :return: The title of this AccountManagerColumn.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this AccountManagerColumn.

        Localized title of a column.  # noqa: E501

        :param title: The title of this AccountManagerColumn.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def tooltip(self) -> str:
        """Gets the tooltip of this AccountManagerColumn.

        Tooltip that is shown on mouse hover.  # noqa: E501

        :return: The tooltip of this AccountManagerColumn.
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip: str):
        """Sets the tooltip of this AccountManagerColumn.

        Tooltip that is shown on mouse hover.  # noqa: E501

        :param tooltip: The tooltip of this AccountManagerColumn.
        :type tooltip: str
        """

        self._tooltip = tooltip

    @property
    def fixed_width(self) -> bool:
        """Gets the fixed_width of this AccountManagerColumn.

        Set it to true if data length is frequently changed.  # noqa: E501

        :return: The fixed_width of this AccountManagerColumn.
        :rtype: bool
        """
        return self._fixed_width

    @fixed_width.setter
    def fixed_width(self, fixed_width: bool):
        """Sets the fixed_width of this AccountManagerColumn.

        Set it to true if data length is frequently changed.  # noqa: E501

        :param fixed_width: The fixed_width of this AccountManagerColumn.
        :type fixed_width: bool
        """

        self._fixed_width = fixed_width

    @property
    def sortable(self) -> bool:
        """Gets the sortable of this AccountManagerColumn.

        Set it to false if this columns data should not be sortable.  # noqa: E501

        :return: The sortable of this AccountManagerColumn.
        :rtype: bool
        """
        return self._sortable

    @sortable.setter
    def sortable(self, sortable: bool):
        """Sets the sortable of this AccountManagerColumn.

        Set it to false if this columns data should not be sortable.  # noqa: E501

        :param sortable: The sortable of this AccountManagerColumn.
        :type sortable: bool
        """

        self._sortable = sortable
