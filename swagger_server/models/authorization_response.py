# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AuthorizationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expiration: float=None, _2fa_required: bool=None):  # noqa: E501
        """AuthorizationResponse - a model defined in Swagger

        :param access_token: The access_token of this AuthorizationResponse.  # noqa: E501
        :type access_token: str
        :param expiration: The expiration of this AuthorizationResponse.  # noqa: E501
        :type expiration: float
        :param _2fa_required: The _2fa_required of this AuthorizationResponse.  # noqa: E501
        :type _2fa_required: bool
        """
        self.swagger_types = {
            'access_token': str,
            'expiration': float,
            '_2fa_required': bool
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expiration': 'expiration',
            '_2fa_required': '2fa_required'
        }

        self._access_token = access_token
        self._expiration = expiration
        self.__2fa_required = _2fa_required

    @classmethod
    def from_dict(cls, dikt) -> 'AuthorizationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthorizationResponse of this AuthorizationResponse.  # noqa: E501
        :rtype: AuthorizationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self) -> str:
        """Gets the access_token of this AuthorizationResponse.

        Access token acts as a session ID that the application uses for making requests. This token should be protected as if it were user credentials.  # noqa: E501

        :return: The access_token of this AuthorizationResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token: str):
        """Sets the access_token of this AuthorizationResponse.

        Access token acts as a session ID that the application uses for making requests. This token should be protected as if it were user credentials.  # noqa: E501

        :param access_token: The access_token of this AuthorizationResponse.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def expiration(self) -> float:
        """Gets the expiration of this AuthorizationResponse.

        The time when the token is expired is represented as the number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970).  # noqa: E501

        :return: The expiration of this AuthorizationResponse.
        :rtype: float
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration: float):
        """Sets the expiration of this AuthorizationResponse.

        The time when the token is expired is represented as the number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970).  # noqa: E501

        :param expiration: The expiration of this AuthorizationResponse.
        :type expiration: float
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    @property
    def _2fa_required(self) -> bool:
        """Gets the _2fa_required of this AuthorizationResponse.

        Set it to true if Two Factor Authentication Code is required in the next /authorize request.  # noqa: E501

        :return: The _2fa_required of this AuthorizationResponse.
        :rtype: bool
        """
        return self.__2fa_required

    @_2fa_required.setter
    def _2fa_required(self, _2fa_required: bool):
        """Sets the _2fa_required of this AuthorizationResponse.

        Set it to true if Two Factor Authentication Code is required in the next /authorize request.  # noqa: E501

        :param _2fa_required: The _2fa_required of this AuthorizationResponse.
        :type _2fa_required: bool
        """

        self.__2fa_required = _2fa_required
