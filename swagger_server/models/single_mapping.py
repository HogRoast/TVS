# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SingleMapping(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, f: List[str]=None, s: str=None):  # noqa: E501
        """SingleMapping - a model defined in Swagger

        :param f: The f of this SingleMapping.  # noqa: E501
        :type f: List[str]
        :param s: The s of this SingleMapping.  # noqa: E501
        :type s: str
        """
        self.swagger_types = {
            'f': List[str],
            's': str
        }

        self.attribute_map = {
            'f': 'f',
            's': 's'
        }

        self._f = f
        self._s = s

    @classmethod
    def from_dict(cls, dikt) -> 'SingleMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SingleMapping of this SingleMapping.  # noqa: E501
        :rtype: SingleMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def f(self) -> List[str]:
        """Gets the f of this SingleMapping.

        An array with the only one string element &ndash; broker symbol name.  # noqa: E501

        :return: The f of this SingleMapping.
        :rtype: List[str]
        """
        return self._f

    @f.setter
    def f(self, f: List[str]):
        """Sets the f of this SingleMapping.

        An array with the only one string element &ndash; broker symbol name.  # noqa: E501

        :param f: The f of this SingleMapping.
        :type f: List[str]
        """

        self._f = f

    @property
    def s(self) -> str:
        """Gets the s of this SingleMapping.

        TradingView symbol name with prefix (AA:XXXX).  # noqa: E501

        :return: The s of this SingleMapping.
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s: str):
        """Sets the s of this SingleMapping.

        TradingView symbol name with prefix (AA:XXXX).  # noqa: E501

        :param s: The s of this SingleMapping.
        :type s: str
        """

        self._s = s
