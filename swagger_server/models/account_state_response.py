# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccountStateResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, unrealized_pl: float=None, equity: float=None, am_data: List[List[List[str]]]=None):  # noqa: E501
        """AccountStateResponse - a model defined in Swagger

        :param balance: The balance of this AccountStateResponse.  # noqa: E501
        :type balance: float
        :param unrealized_pl: The unrealized_pl of this AccountStateResponse.  # noqa: E501
        :type unrealized_pl: float
        :param equity: The equity of this AccountStateResponse.  # noqa: E501
        :type equity: float
        :param am_data: The am_data of this AccountStateResponse.  # noqa: E501
        :type am_data: List[List[List[str]]]
        """
        self.swagger_types = {
            'balance': float,
            'unrealized_pl': float,
            'equity': float,
            'am_data': List[List[List[str]]]
        }

        self.attribute_map = {
            'balance': 'balance',
            'unrealized_pl': 'unrealizedPl',
            'equity': 'equity',
            'am_data': 'amData'
        }

        self._balance = balance
        self._unrealized_pl = unrealized_pl
        self._equity = equity
        self._am_data = am_data

    @classmethod
    def from_dict(cls, dikt) -> 'AccountStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountStateResponse of this AccountStateResponse.  # noqa: E501
        :rtype: AccountStateResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self) -> float:
        """Gets the balance of this AccountStateResponse.

        Account Balance.  # noqa: E501

        :return: The balance of this AccountStateResponse.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: float):
        """Sets the balance of this AccountStateResponse.

        Account Balance.  # noqa: E501

        :param balance: The balance of this AccountStateResponse.
        :type balance: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def unrealized_pl(self) -> float:
        """Gets the unrealized_pl of this AccountStateResponse.

        Unrealized Profit/loss.  # noqa: E501

        :return: The unrealized_pl of this AccountStateResponse.
        :rtype: float
        """
        return self._unrealized_pl

    @unrealized_pl.setter
    def unrealized_pl(self, unrealized_pl: float):
        """Sets the unrealized_pl of this AccountStateResponse.

        Unrealized Profit/loss.  # noqa: E501

        :param unrealized_pl: The unrealized_pl of this AccountStateResponse.
        :type unrealized_pl: float
        """
        if unrealized_pl is None:
            raise ValueError("Invalid value for `unrealized_pl`, must not be `None`")  # noqa: E501

        self._unrealized_pl = unrealized_pl

    @property
    def equity(self) -> float:
        """Gets the equity of this AccountStateResponse.

        Equity.  # noqa: E501

        :return: The equity of this AccountStateResponse.
        :rtype: float
        """
        return self._equity

    @equity.setter
    def equity(self, equity: float):
        """Sets the equity of this AccountStateResponse.

        Equity.  # noqa: E501

        :param equity: The equity of this AccountStateResponse.
        :type equity: float
        """

        self._equity = equity

    @property
    def am_data(self) -> List[List[List[str]]]:
        """Gets the am_data of this AccountStateResponse.

        Account Manager data. Structure of Account Manager is defined by `/config` response. Each element of this array is a table.  # noqa: E501

        :return: The am_data of this AccountStateResponse.
        :rtype: List[List[List[str]]]
        """
        return self._am_data

    @am_data.setter
    def am_data(self, am_data: List[List[List[str]]]):
        """Sets the am_data of this AccountStateResponse.

        Account Manager data. Structure of Account Manager is defined by `/config` response. Each element of this array is a table.  # noqa: E501

        :param am_data: The am_data of this AccountStateResponse.
        :type am_data: List[List[List[str]]]
        """

        self._am_data = am_data
