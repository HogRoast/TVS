# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccountFlags(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, show_quantity_instead_of_amount: bool=None, support_dom: bool=None, support_brackets: bool=None, support_order_brackets: bool=None, support_position_brackets: bool=None, support_close_position: bool=None, support_edit_amount: bool=None, support_level2_data: bool=None, support_multiposition: bool=None, support_pl_update: bool=None, support_reduce_position: bool=None, support_stop_limit_orders: bool=None, support_orders_history: bool=None, support_executions: bool=None, support_digital_signature: bool=None):  # noqa: E501
        """AccountFlags - a model defined in Swagger

        :param show_quantity_instead_of_amount: The show_quantity_instead_of_amount of this AccountFlags.  # noqa: E501
        :type show_quantity_instead_of_amount: bool
        :param support_dom: The support_dom of this AccountFlags.  # noqa: E501
        :type support_dom: bool
        :param support_brackets: The support_brackets of this AccountFlags.  # noqa: E501
        :type support_brackets: bool
        :param support_order_brackets: The support_order_brackets of this AccountFlags.  # noqa: E501
        :type support_order_brackets: bool
        :param support_position_brackets: The support_position_brackets of this AccountFlags.  # noqa: E501
        :type support_position_brackets: bool
        :param support_close_position: The support_close_position of this AccountFlags.  # noqa: E501
        :type support_close_position: bool
        :param support_edit_amount: The support_edit_amount of this AccountFlags.  # noqa: E501
        :type support_edit_amount: bool
        :param support_level2_data: The support_level2_data of this AccountFlags.  # noqa: E501
        :type support_level2_data: bool
        :param support_multiposition: The support_multiposition of this AccountFlags.  # noqa: E501
        :type support_multiposition: bool
        :param support_pl_update: The support_pl_update of this AccountFlags.  # noqa: E501
        :type support_pl_update: bool
        :param support_reduce_position: The support_reduce_position of this AccountFlags.  # noqa: E501
        :type support_reduce_position: bool
        :param support_stop_limit_orders: The support_stop_limit_orders of this AccountFlags.  # noqa: E501
        :type support_stop_limit_orders: bool
        :param support_orders_history: The support_orders_history of this AccountFlags.  # noqa: E501
        :type support_orders_history: bool
        :param support_executions: The support_executions of this AccountFlags.  # noqa: E501
        :type support_executions: bool
        :param support_digital_signature: The support_digital_signature of this AccountFlags.  # noqa: E501
        :type support_digital_signature: bool
        """
        self.swagger_types = {
            'show_quantity_instead_of_amount': bool,
            'support_dom': bool,
            'support_brackets': bool,
            'support_order_brackets': bool,
            'support_position_brackets': bool,
            'support_close_position': bool,
            'support_edit_amount': bool,
            'support_level2_data': bool,
            'support_multiposition': bool,
            'support_pl_update': bool,
            'support_reduce_position': bool,
            'support_stop_limit_orders': bool,
            'support_orders_history': bool,
            'support_executions': bool,
            'support_digital_signature': bool
        }

        self.attribute_map = {
            'show_quantity_instead_of_amount': 'showQuantityInsteadOfAmount',
            'support_dom': 'supportDOM',
            'support_brackets': 'supportBrackets',
            'support_order_brackets': 'supportOrderBrackets',
            'support_position_brackets': 'supportPositionBrackets',
            'support_close_position': 'supportClosePosition',
            'support_edit_amount': 'supportEditAmount',
            'support_level2_data': 'supportLevel2Data',
            'support_multiposition': 'supportMultiposition',
            'support_pl_update': 'supportPLUpdate',
            'support_reduce_position': 'supportReducePosition',
            'support_stop_limit_orders': 'supportStopLimitOrders',
            'support_orders_history': 'supportOrdersHistory',
            'support_executions': 'supportExecutions',
            'support_digital_signature': 'supportDigitalSignature'
        }

        self._show_quantity_instead_of_amount = show_quantity_instead_of_amount
        self._support_dom = support_dom
        self._support_brackets = support_brackets
        self._support_order_brackets = support_order_brackets
        self._support_position_brackets = support_position_brackets
        self._support_close_position = support_close_position
        self._support_edit_amount = support_edit_amount
        self._support_level2_data = support_level2_data
        self._support_multiposition = support_multiposition
        self._support_pl_update = support_pl_update
        self._support_reduce_position = support_reduce_position
        self._support_stop_limit_orders = support_stop_limit_orders
        self._support_orders_history = support_orders_history
        self._support_executions = support_executions
        self._support_digital_signature = support_digital_signature

    @classmethod
    def from_dict(cls, dikt) -> 'AccountFlags':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountFlags of this AccountFlags.  # noqa: E501
        :rtype: AccountFlags
        """
        return util.deserialize_model(dikt, cls)

    @property
    def show_quantity_instead_of_amount(self) -> bool:
        """Gets the show_quantity_instead_of_amount of this AccountFlags.

        Renames Amount to Quantity in the Order Ticket.  # noqa: E501

        :return: The show_quantity_instead_of_amount of this AccountFlags.
        :rtype: bool
        """
        return self._show_quantity_instead_of_amount

    @show_quantity_instead_of_amount.setter
    def show_quantity_instead_of_amount(self, show_quantity_instead_of_amount: bool):
        """Sets the show_quantity_instead_of_amount of this AccountFlags.

        Renames Amount to Quantity in the Order Ticket.  # noqa: E501

        :param show_quantity_instead_of_amount: The show_quantity_instead_of_amount of this AccountFlags.
        :type show_quantity_instead_of_amount: bool
        """

        self._show_quantity_instead_of_amount = show_quantity_instead_of_amount

    @property
    def support_dom(self) -> bool:
        """Gets the support_dom of this AccountFlags.

        Whether you want for DOM (Depth of market) widget to be available.  # noqa: E501

        :return: The support_dom of this AccountFlags.
        :rtype: bool
        """
        return self._support_dom

    @support_dom.setter
    def support_dom(self, support_dom: bool):
        """Sets the support_dom of this AccountFlags.

        Whether you want for DOM (Depth of market) widget to be available.  # noqa: E501

        :param support_dom: The support_dom of this AccountFlags.
        :type support_dom: bool
        """

        self._support_dom = support_dom

    @property
    def support_brackets(self) -> bool:
        """Gets the support_brackets of this AccountFlags.

        Whether you support brackets. Deprecated. Use supportOrderBrackets and supportPositionBrackets instead.  # noqa: E501

        :return: The support_brackets of this AccountFlags.
        :rtype: bool
        """
        return self._support_brackets

    @support_brackets.setter
    def support_brackets(self, support_brackets: bool):
        """Sets the support_brackets of this AccountFlags.

        Whether you support brackets. Deprecated. Use supportOrderBrackets and supportPositionBrackets instead.  # noqa: E501

        :param support_brackets: The support_brackets of this AccountFlags.
        :type support_brackets: bool
        """

        self._support_brackets = support_brackets

    @property
    def support_order_brackets(self) -> bool:
        """Gets the support_order_brackets of this AccountFlags.

        Whether you support adding (or modifying) stop loss and take profit to orders.  # noqa: E501

        :return: The support_order_brackets of this AccountFlags.
        :rtype: bool
        """
        return self._support_order_brackets

    @support_order_brackets.setter
    def support_order_brackets(self, support_order_brackets: bool):
        """Sets the support_order_brackets of this AccountFlags.

        Whether you support adding (or modifying) stop loss and take profit to orders.  # noqa: E501

        :param support_order_brackets: The support_order_brackets of this AccountFlags.
        :type support_order_brackets: bool
        """

        self._support_order_brackets = support_order_brackets

    @property
    def support_position_brackets(self) -> bool:
        """Gets the support_position_brackets of this AccountFlags.

        Whether you support adding (or modifying) stop loss and take profit to positions.  # noqa: E501

        :return: The support_position_brackets of this AccountFlags.
        :rtype: bool
        """
        return self._support_position_brackets

    @support_position_brackets.setter
    def support_position_brackets(self, support_position_brackets: bool):
        """Sets the support_position_brackets of this AccountFlags.

        Whether you support adding (or modifying) stop loss and take profit to positions.  # noqa: E501

        :param support_position_brackets: The support_position_brackets of this AccountFlags.
        :type support_position_brackets: bool
        """

        self._support_position_brackets = support_position_brackets

    @property
    def support_close_position(self) -> bool:
        """Gets the support_close_position of this AccountFlags.

        Whether you support closing of a position without a need for a user to fill an order. If it is `true` the Trading Terminal shows a confirmation dialog and sends a DELETE request instead of bringing up an order ticket.  # noqa: E501

        :return: The support_close_position of this AccountFlags.
        :rtype: bool
        """
        return self._support_close_position

    @support_close_position.setter
    def support_close_position(self, support_close_position: bool):
        """Sets the support_close_position of this AccountFlags.

        Whether you support closing of a position without a need for a user to fill an order. If it is `true` the Trading Terminal shows a confirmation dialog and sends a DELETE request instead of bringing up an order ticket.  # noqa: E501

        :param support_close_position: The support_close_position of this AccountFlags.
        :type support_close_position: bool
        """

        self._support_close_position = support_close_position

    @property
    def support_edit_amount(self) -> bool:
        """Gets the support_edit_amount of this AccountFlags.

        Whether you support editing orders quantity. If you set it to `false`, the quantity control in the order ticket will be disabled when modifing an order.  # noqa: E501

        :return: The support_edit_amount of this AccountFlags.
        :rtype: bool
        """
        return self._support_edit_amount

    @support_edit_amount.setter
    def support_edit_amount(self, support_edit_amount: bool):
        """Sets the support_edit_amount of this AccountFlags.

        Whether you support editing orders quantity. If you set it to `false`, the quantity control in the order ticket will be disabled when modifing an order.  # noqa: E501

        :param support_edit_amount: The support_edit_amount of this AccountFlags.
        :type support_edit_amount: bool
        """

        self._support_edit_amount = support_edit_amount

    @property
    def support_level2_data(self) -> bool:
        """Gets the support_level2_data of this AccountFlags.

        Whether you support Level 2 data. It is required to display DOM levels. You must implement `/streaming` to display DOM.  # noqa: E501

        :return: The support_level2_data of this AccountFlags.
        :rtype: bool
        """
        return self._support_level2_data

    @support_level2_data.setter
    def support_level2_data(self, support_level2_data: bool):
        """Sets the support_level2_data of this AccountFlags.

        Whether you support Level 2 data. It is required to display DOM levels. You must implement `/streaming` to display DOM.  # noqa: E501

        :param support_level2_data: The support_level2_data of this AccountFlags.
        :type support_level2_data: bool
        """

        self._support_level2_data = support_level2_data

    @property
    def support_multiposition(self) -> bool:
        """Gets the support_multiposition of this AccountFlags.

        Whether you support multiple positions at one instrument at the same time.  # noqa: E501

        :return: The support_multiposition of this AccountFlags.
        :rtype: bool
        """
        return self._support_multiposition

    @support_multiposition.setter
    def support_multiposition(self, support_multiposition: bool):
        """Sets the support_multiposition of this AccountFlags.

        Whether you support multiple positions at one instrument at the same time.  # noqa: E501

        :param support_multiposition: The support_multiposition of this AccountFlags.
        :type support_multiposition: bool
        """

        self._support_multiposition = support_multiposition

    @property
    def support_pl_update(self) -> bool:
        """Gets the support_pl_update of this AccountFlags.

        Whether you provide `unrealizedPl` for positions. Otherwise P&L will be calculated automatically based on a simple algorithm.  # noqa: E501

        :return: The support_pl_update of this AccountFlags.
        :rtype: bool
        """
        return self._support_pl_update

    @support_pl_update.setter
    def support_pl_update(self, support_pl_update: bool):
        """Sets the support_pl_update of this AccountFlags.

        Whether you provide `unrealizedPl` for positions. Otherwise P&L will be calculated automatically based on a simple algorithm.  # noqa: E501

        :param support_pl_update: The support_pl_update of this AccountFlags.
        :type support_pl_update: bool
        """

        self._support_pl_update = support_pl_update

    @property
    def support_reduce_position(self) -> bool:
        """Gets the support_reduce_position of this AccountFlags.

        Reserved for future use.  # noqa: E501

        :return: The support_reduce_position of this AccountFlags.
        :rtype: bool
        """
        return self._support_reduce_position

    @support_reduce_position.setter
    def support_reduce_position(self, support_reduce_position: bool):
        """Sets the support_reduce_position of this AccountFlags.

        Reserved for future use.  # noqa: E501

        :param support_reduce_position: The support_reduce_position of this AccountFlags.
        :type support_reduce_position: bool
        """

        self._support_reduce_position = support_reduce_position

    @property
    def support_stop_limit_orders(self) -> bool:
        """Gets the support_stop_limit_orders of this AccountFlags.

        Whether you support StopLimit orders.  # noqa: E501

        :return: The support_stop_limit_orders of this AccountFlags.
        :rtype: bool
        """
        return self._support_stop_limit_orders

    @support_stop_limit_orders.setter
    def support_stop_limit_orders(self, support_stop_limit_orders: bool):
        """Sets the support_stop_limit_orders of this AccountFlags.

        Whether you support StopLimit orders.  # noqa: E501

        :param support_stop_limit_orders: The support_stop_limit_orders of this AccountFlags.
        :type support_stop_limit_orders: bool
        """

        self._support_stop_limit_orders = support_stop_limit_orders

    @property
    def support_orders_history(self) -> bool:
        """Gets the support_orders_history of this AccountFlags.

        Whether you support /ordersHistory request.  # noqa: E501

        :return: The support_orders_history of this AccountFlags.
        :rtype: bool
        """
        return self._support_orders_history

    @support_orders_history.setter
    def support_orders_history(self, support_orders_history: bool):
        """Sets the support_orders_history of this AccountFlags.

        Whether you support /ordersHistory request.  # noqa: E501

        :param support_orders_history: The support_orders_history of this AccountFlags.
        :type support_orders_history: bool
        """

        self._support_orders_history = support_orders_history

    @property
    def support_executions(self) -> bool:
        """Gets the support_executions of this AccountFlags.

        Whether you support /executions request.  # noqa: E501

        :return: The support_executions of this AccountFlags.
        :rtype: bool
        """
        return self._support_executions

    @support_executions.setter
    def support_executions(self, support_executions: bool):
        """Sets the support_executions of this AccountFlags.

        Whether you support /executions request.  # noqa: E501

        :param support_executions: The support_executions of this AccountFlags.
        :type support_executions: bool
        """

        self._support_executions = support_executions

    @property
    def support_digital_signature(self) -> bool:
        """Gets the support_digital_signature of this AccountFlags.

        Whether you support Digital signature input field in the Order Ticket.  # noqa: E501

        :return: The support_digital_signature of this AccountFlags.
        :rtype: bool
        """
        return self._support_digital_signature

    @support_digital_signature.setter
    def support_digital_signature(self, support_digital_signature: bool):
        """Sets the support_digital_signature of this AccountFlags.

        Whether you support Digital signature input field in the Order Ticket.  # noqa: E501

        :param support_digital_signature: The support_digital_signature of this AccountFlags.
        :type support_digital_signature: bool
        """

        self._support_digital_signature = support_digital_signature
