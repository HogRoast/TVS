# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BarsArrays(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, s: str=None, errmsg: str=None, nb: float=None, t: List[float]=None, o: List[float]=None, h: List[float]=None, l: List[float]=None, c: List[float]=None, v: List[float]=None):  # noqa: E501
        """BarsArrays - a model defined in Swagger

        :param s: The s of this BarsArrays.  # noqa: E501
        :type s: str
        :param errmsg: The errmsg of this BarsArrays.  # noqa: E501
        :type errmsg: str
        :param nb: The nb of this BarsArrays.  # noqa: E501
        :type nb: float
        :param t: The t of this BarsArrays.  # noqa: E501
        :type t: List[float]
        :param o: The o of this BarsArrays.  # noqa: E501
        :type o: List[float]
        :param h: The h of this BarsArrays.  # noqa: E501
        :type h: List[float]
        :param l: The l of this BarsArrays.  # noqa: E501
        :type l: List[float]
        :param c: The c of this BarsArrays.  # noqa: E501
        :type c: List[float]
        :param v: The v of this BarsArrays.  # noqa: E501
        :type v: List[float]
        """
        self.swagger_types = {
            's': str,
            'errmsg': str,
            'nb': float,
            't': List[float],
            'o': List[float],
            'h': List[float],
            'l': List[float],
            'c': List[float],
            'v': List[float]
        }

        self.attribute_map = {
            's': 's',
            'errmsg': 'errmsg',
            'nb': 'nb',
            't': 't',
            'o': 'o',
            'h': 'h',
            'l': 'l',
            'c': 'c',
            'v': 'v'
        }

        self._s = s
        self._errmsg = errmsg
        self._nb = nb
        self._t = t
        self._o = o
        self._h = h
        self._l = l
        self._c = c
        self._v = v

    @classmethod
    def from_dict(cls, dikt) -> 'BarsArrays':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BarsArrays of this BarsArrays.  # noqa: E501
        :rtype: BarsArrays
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s(self) -> str:
        """Gets the s of this BarsArrays.

        Status code.  # noqa: E501

        :return: The s of this BarsArrays.
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s: str):
        """Sets the s of this BarsArrays.

        Status code.  # noqa: E501

        :param s: The s of this BarsArrays.
        :type s: str
        """
        allowed_values = ["ok", "error", "no_data"]  # noqa: E501
        if s not in allowed_values:
            raise ValueError(
                "Invalid value for `s` ({0}), must be one of {1}"
                .format(s, allowed_values)
            )

        self._s = s

    @property
    def errmsg(self) -> str:
        """Gets the errmsg of this BarsArrays.

        Error message. Should be provided if s = \"error\".  # noqa: E501

        :return: The errmsg of this BarsArrays.
        :rtype: str
        """
        return self._errmsg

    @errmsg.setter
    def errmsg(self, errmsg: str):
        """Sets the errmsg of this BarsArrays.

        Error message. Should be provided if s = \"error\".  # noqa: E501

        :param errmsg: The errmsg of this BarsArrays.
        :type errmsg: str
        """

        self._errmsg = errmsg

    @property
    def nb(self) -> float:
        """Gets the nb of this BarsArrays.

        Unix time of the next bar if there is no data (status code is no_data) in the requested period (optional).  # noqa: E501

        :return: The nb of this BarsArrays.
        :rtype: float
        """
        return self._nb

    @nb.setter
    def nb(self, nb: float):
        """Sets the nb of this BarsArrays.

        Unix time of the next bar if there is no data (status code is no_data) in the requested period (optional).  # noqa: E501

        :param nb: The nb of this BarsArrays.
        :type nb: float
        """

        self._nb = nb

    @property
    def t(self) -> List[float]:
        """Gets the t of this BarsArrays.

        Bar time, unix timestamp (UTC). Daily bars should only have the date part, time should be 0.  # noqa: E501

        :return: The t of this BarsArrays.
        :rtype: List[float]
        """
        return self._t

    @t.setter
    def t(self, t: List[float]):
        """Sets the t of this BarsArrays.

        Bar time, unix timestamp (UTC). Daily bars should only have the date part, time should be 0.  # noqa: E501

        :param t: The t of this BarsArrays.
        :type t: List[float]
        """

        self._t = t

    @property
    def o(self) -> List[float]:
        """Gets the o of this BarsArrays.

        Open price.  # noqa: E501

        :return: The o of this BarsArrays.
        :rtype: List[float]
        """
        return self._o

    @o.setter
    def o(self, o: List[float]):
        """Sets the o of this BarsArrays.

        Open price.  # noqa: E501

        :param o: The o of this BarsArrays.
        :type o: List[float]
        """

        self._o = o

    @property
    def h(self) -> List[float]:
        """Gets the h of this BarsArrays.

        High price.  # noqa: E501

        :return: The h of this BarsArrays.
        :rtype: List[float]
        """
        return self._h

    @h.setter
    def h(self, h: List[float]):
        """Sets the h of this BarsArrays.

        High price.  # noqa: E501

        :param h: The h of this BarsArrays.
        :type h: List[float]
        """

        self._h = h

    @property
    def l(self) -> List[float]:
        """Gets the l of this BarsArrays.

        Low price.  # noqa: E501

        :return: The l of this BarsArrays.
        :rtype: List[float]
        """
        return self._l

    @l.setter
    def l(self, l: List[float]):
        """Sets the l of this BarsArrays.

        Low price.  # noqa: E501

        :param l: The l of this BarsArrays.
        :type l: List[float]
        """

        self._l = l

    @property
    def c(self) -> List[float]:
        """Gets the c of this BarsArrays.

        Close price.  # noqa: E501

        :return: The c of this BarsArrays.
        :rtype: List[float]
        """
        return self._c

    @c.setter
    def c(self, c: List[float]):
        """Sets the c of this BarsArrays.

        Close price.  # noqa: E501

        :param c: The c of this BarsArrays.
        :type c: List[float]
        """

        self._c = c

    @property
    def v(self) -> List[float]:
        """Gets the v of this BarsArrays.

        Volume.  # noqa: E501

        :return: The v of this BarsArrays.
        :rtype: List[float]
        """
        return self._v

    @v.setter
    def v(self, v: List[float]):
        """Sets the v of this BarsArrays.

        Volume.  # noqa: E501

        :param v: The v of this BarsArrays.
        :type v: List[float]
        """

        self._v = v
