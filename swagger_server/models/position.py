# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Position(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, instrument: str=None, qty: float=None, side: str=None, avg_price: float=None, unrealized_pl: float=None):  # noqa: E501
        """Position - a model defined in Swagger

        :param id: The id of this Position.  # noqa: E501
        :type id: str
        :param instrument: The instrument of this Position.  # noqa: E501
        :type instrument: str
        :param qty: The qty of this Position.  # noqa: E501
        :type qty: float
        :param side: The side of this Position.  # noqa: E501
        :type side: str
        :param avg_price: The avg_price of this Position.  # noqa: E501
        :type avg_price: float
        :param unrealized_pl: The unrealized_pl of this Position.  # noqa: E501
        :type unrealized_pl: float
        """
        self.swagger_types = {
            'id': str,
            'instrument': str,
            'qty': float,
            'side': str,
            'avg_price': float,
            'unrealized_pl': float
        }

        self.attribute_map = {
            'id': 'id',
            'instrument': 'instrument',
            'qty': 'qty',
            'side': 'side',
            'avg_price': 'avgPrice',
            'unrealized_pl': 'unrealizedPl'
        }

        self._id = id
        self._instrument = instrument
        self._qty = qty
        self._side = side
        self._avg_price = avg_price
        self._unrealized_pl = unrealized_pl

    @classmethod
    def from_dict(cls, dikt) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Position of this Position.  # noqa: E501
        :rtype: Position
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Position.


        :return: The id of this Position.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Position.


        :param id: The id of this Position.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instrument(self) -> str:
        """Gets the instrument of this Position.

        Instrument name that is used on a broker's side.  # noqa: E501

        :return: The instrument of this Position.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: str):
        """Sets the instrument of this Position.

        Instrument name that is used on a broker's side.  # noqa: E501

        :param instrument: The instrument of this Position.
        :type instrument: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def qty(self) -> float:
        """Gets the qty of this Position.

        Quantity.  # noqa: E501

        :return: The qty of this Position.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty: float):
        """Sets the qty of this Position.

        Quantity.  # noqa: E501

        :param qty: The qty of this Position.
        :type qty: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def side(self) -> str:
        """Gets the side of this Position.

        Side. Possible values &ndash; \"buy\" and \"sell\".  # noqa: E501

        :return: The side of this Position.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side: str):
        """Sets the side of this Position.

        Side. Possible values &ndash; \"buy\" and \"sell\".  # noqa: E501

        :param side: The side of this Position.
        :type side: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def avg_price(self) -> float:
        """Gets the avg_price of this Position.

        Average price of position trades.  # noqa: E501

        :return: The avg_price of this Position.
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price: float):
        """Sets the avg_price of this Position.

        Average price of position trades.  # noqa: E501

        :param avg_price: The avg_price of this Position.
        :type avg_price: float
        """
        if avg_price is None:
            raise ValueError("Invalid value for `avg_price`, must not be `None`")  # noqa: E501

        self._avg_price = avg_price

    @property
    def unrealized_pl(self) -> float:
        """Gets the unrealized_pl of this Position.

        Unrealized (open) profit/loss.  # noqa: E501

        :return: The unrealized_pl of this Position.
        :rtype: float
        """
        return self._unrealized_pl

    @unrealized_pl.setter
    def unrealized_pl(self, unrealized_pl: float):
        """Sets the unrealized_pl of this Position.

        Unrealized (open) profit/loss.  # noqa: E501

        :param unrealized_pl: The unrealized_pl of this Position.
        :type unrealized_pl: float
        """
        if unrealized_pl is None:
            raise ValueError("Invalid value for `unrealized_pl`, must not be `None`")  # noqa: E501

        self._unrealized_pl = unrealized_pl
