# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_manager_column import AccountManagerColumn  # noqa: F401,E501
from swagger_server import util


class AccountManagerTable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, columns: List[AccountManagerColumn]=None):  # noqa: E501
        """AccountManagerTable - a model defined in Swagger

        :param id: The id of this AccountManagerTable.  # noqa: E501
        :type id: str
        :param title: The title of this AccountManagerTable.  # noqa: E501
        :type title: str
        :param columns: The columns of this AccountManagerTable.  # noqa: E501
        :type columns: List[AccountManagerColumn]
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'columns': List[AccountManagerColumn]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'columns': 'columns'
        }

        self._id = id
        self._title = title
        self._columns = columns

    @classmethod
    def from_dict(cls, dikt) -> 'AccountManagerTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountManagerTable of this AccountManagerTable.  # noqa: E501
        :rtype: AccountManagerTable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AccountManagerTable.


        :return: The id of this AccountManagerTable.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AccountManagerTable.


        :param id: The id of this AccountManagerTable.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this AccountManagerTable.

        Localized title of a table.  # noqa: E501

        :return: The title of this AccountManagerTable.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this AccountManagerTable.

        Localized title of a table.  # noqa: E501

        :param title: The title of this AccountManagerTable.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def columns(self) -> List[AccountManagerColumn]:
        """Gets the columns of this AccountManagerTable.


        :return: The columns of this AccountManagerTable.
        :rtype: List[AccountManagerColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns: List[AccountManagerColumn]):
        """Sets the columns of this AccountManagerTable.


        :param columns: The columns of this AccountManagerTable.
        :type columns: List[AccountManagerColumn]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns
