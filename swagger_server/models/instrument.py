# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Instrument(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, min_qty: float=None, max_qty: float=None, qty_step: float=None, pip_size: float=None, pip_value: float=None, min_tick: float=None, lot_size: float=None):  # noqa: E501
        """Instrument - a model defined in Swagger

        :param name: The name of this Instrument.  # noqa: E501
        :type name: str
        :param description: The description of this Instrument.  # noqa: E501
        :type description: str
        :param min_qty: The min_qty of this Instrument.  # noqa: E501
        :type min_qty: float
        :param max_qty: The max_qty of this Instrument.  # noqa: E501
        :type max_qty: float
        :param qty_step: The qty_step of this Instrument.  # noqa: E501
        :type qty_step: float
        :param pip_size: The pip_size of this Instrument.  # noqa: E501
        :type pip_size: float
        :param pip_value: The pip_value of this Instrument.  # noqa: E501
        :type pip_value: float
        :param min_tick: The min_tick of this Instrument.  # noqa: E501
        :type min_tick: float
        :param lot_size: The lot_size of this Instrument.  # noqa: E501
        :type lot_size: float
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'min_qty': float,
            'max_qty': float,
            'qty_step': float,
            'pip_size': float,
            'pip_value': float,
            'min_tick': float,
            'lot_size': float
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'min_qty': 'minQty',
            'max_qty': 'maxQty',
            'qty_step': 'qtyStep',
            'pip_size': 'pipSize',
            'pip_value': 'pipValue',
            'min_tick': 'minTick',
            'lot_size': 'lotSize'
        }

        self._name = name
        self._description = description
        self._min_qty = min_qty
        self._max_qty = max_qty
        self._qty_step = qty_step
        self._pip_size = pip_size
        self._pip_value = pip_value
        self._min_tick = min_tick
        self._lot_size = lot_size

    @classmethod
    def from_dict(cls, dikt) -> 'Instrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Instrument of this Instrument.  # noqa: E501
        :rtype: Instrument
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Instrument.

        Broker instrument name.  # noqa: E501

        :return: The name of this Instrument.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Instrument.

        Broker instrument name.  # noqa: E501

        :param name: The name of this Instrument.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Instrument.

        Instrument description.  # noqa: E501

        :return: The description of this Instrument.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Instrument.

        Instrument description.  # noqa: E501

        :param description: The description of this Instrument.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def min_qty(self) -> float:
        """Gets the min_qty of this Instrument.

        Minimum quantity for trading.  # noqa: E501

        :return: The min_qty of this Instrument.
        :rtype: float
        """
        return self._min_qty

    @min_qty.setter
    def min_qty(self, min_qty: float):
        """Sets the min_qty of this Instrument.

        Minimum quantity for trading.  # noqa: E501

        :param min_qty: The min_qty of this Instrument.
        :type min_qty: float
        """

        self._min_qty = min_qty

    @property
    def max_qty(self) -> float:
        """Gets the max_qty of this Instrument.

        Maximum quantity for trading.  # noqa: E501

        :return: The max_qty of this Instrument.
        :rtype: float
        """
        return self._max_qty

    @max_qty.setter
    def max_qty(self, max_qty: float):
        """Sets the max_qty of this Instrument.

        Maximum quantity for trading.  # noqa: E501

        :param max_qty: The max_qty of this Instrument.
        :type max_qty: float
        """

        self._max_qty = max_qty

    @property
    def qty_step(self) -> float:
        """Gets the qty_step of this Instrument.

        Quantity step.  # noqa: E501

        :return: The qty_step of this Instrument.
        :rtype: float
        """
        return self._qty_step

    @qty_step.setter
    def qty_step(self, qty_step: float):
        """Sets the qty_step of this Instrument.

        Quantity step.  # noqa: E501

        :param qty_step: The qty_step of this Instrument.
        :type qty_step: float
        """

        self._qty_step = qty_step

    @property
    def pip_size(self) -> float:
        """Gets the pip_size of this Instrument.

        Size of 1 pip. It is equal to minTick for non-forex symbols. For forex pairs it equals either the minTick, or the minTick multiplied by 10. For example, for EURCAD minTick is 0.00001 and pipSize is 0.0001.  # noqa: E501

        :return: The pip_size of this Instrument.
        :rtype: float
        """
        return self._pip_size

    @pip_size.setter
    def pip_size(self, pip_size: float):
        """Sets the pip_size of this Instrument.

        Size of 1 pip. It is equal to minTick for non-forex symbols. For forex pairs it equals either the minTick, or the minTick multiplied by 10. For example, for EURCAD minTick is 0.00001 and pipSize is 0.0001.  # noqa: E501

        :param pip_size: The pip_size of this Instrument.
        :type pip_size: float
        """

        self._pip_size = pip_size

    @property
    def pip_value(self) -> float:
        """Gets the pip_value of this Instrument.

        Value of 1 pip in account currency.  # noqa: E501

        :return: The pip_value of this Instrument.
        :rtype: float
        """
        return self._pip_value

    @pip_value.setter
    def pip_value(self, pip_value: float):
        """Sets the pip_value of this Instrument.

        Value of 1 pip in account currency.  # noqa: E501

        :param pip_value: The pip_value of this Instrument.
        :type pip_value: float
        """

        self._pip_value = pip_value

    @property
    def min_tick(self) -> float:
        """Gets the min_tick of this Instrument.

        Minimum price movement.  # noqa: E501

        :return: The min_tick of this Instrument.
        :rtype: float
        """
        return self._min_tick

    @min_tick.setter
    def min_tick(self, min_tick: float):
        """Sets the min_tick of this Instrument.

        Minimum price movement.  # noqa: E501

        :param min_tick: The min_tick of this Instrument.
        :type min_tick: float
        """

        self._min_tick = min_tick

    @property
    def lot_size(self) -> float:
        """Gets the lot_size of this Instrument.

        Size of 1 lot.  # noqa: E501

        :return: The lot_size of this Instrument.
        :rtype: float
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size: float):
        """Sets the lot_size of this Instrument.

        Size of 1 lot.  # noqa: E501

        :param lot_size: The lot_size of this Instrument.
        :type lot_size: float
        """

        self._lot_size = lot_size
