# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.order_duration import OrderDuration  # noqa: F401,E501
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, instrument: str=None, qty: float=None, side: str=None, type: str=None, filled_qty: float=None, avg_price: float=None, limit_price: float=None, stop_price: float=None, parent_id: str=None, parent_type: str=None, duration: OrderDuration=None, status: str=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param id: The id of this Order.  # noqa: E501
        :type id: str
        :param instrument: The instrument of this Order.  # noqa: E501
        :type instrument: str
        :param qty: The qty of this Order.  # noqa: E501
        :type qty: float
        :param side: The side of this Order.  # noqa: E501
        :type side: str
        :param type: The type of this Order.  # noqa: E501
        :type type: str
        :param filled_qty: The filled_qty of this Order.  # noqa: E501
        :type filled_qty: float
        :param avg_price: The avg_price of this Order.  # noqa: E501
        :type avg_price: float
        :param limit_price: The limit_price of this Order.  # noqa: E501
        :type limit_price: float
        :param stop_price: The stop_price of this Order.  # noqa: E501
        :type stop_price: float
        :param parent_id: The parent_id of this Order.  # noqa: E501
        :type parent_id: str
        :param parent_type: The parent_type of this Order.  # noqa: E501
        :type parent_type: str
        :param duration: The duration of this Order.  # noqa: E501
        :type duration: OrderDuration
        :param status: The status of this Order.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': str,
            'instrument': str,
            'qty': float,
            'side': str,
            'type': str,
            'filled_qty': float,
            'avg_price': float,
            'limit_price': float,
            'stop_price': float,
            'parent_id': str,
            'parent_type': str,
            'duration': OrderDuration,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'instrument': 'instrument',
            'qty': 'qty',
            'side': 'side',
            'type': 'type',
            'filled_qty': 'filledQty',
            'avg_price': 'avgPrice',
            'limit_price': 'limitPrice',
            'stop_price': 'stopPrice',
            'parent_id': 'parentId',
            'parent_type': 'parentType',
            'duration': 'duration',
            'status': 'status'
        }

        self._id = id
        self._instrument = instrument
        self._qty = qty
        self._side = side
        self._type = type
        self._filled_qty = filled_qty
        self._avg_price = avg_price
        self._limit_price = limit_price
        self._stop_price = stop_price
        self._parent_id = parent_id
        self._parent_type = parent_type
        self._duration = duration
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instrument(self) -> str:
        """Gets the instrument of this Order.

        Instrument name that is used on a broker's side.  # noqa: E501

        :return: The instrument of this Order.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument: str):
        """Sets the instrument of this Order.

        Instrument name that is used on a broker's side.  # noqa: E501

        :param instrument: The instrument of this Order.
        :type instrument: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def qty(self) -> float:
        """Gets the qty of this Order.

        Quantity.  # noqa: E501

        :return: The qty of this Order.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty: float):
        """Sets the qty of this Order.

        Quantity.  # noqa: E501

        :param qty: The qty of this Order.
        :type qty: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def side(self) -> str:
        """Gets the side of this Order.

        Side. Possible values &ndash; \"buy\" and \"sell\".  # noqa: E501

        :return: The side of this Order.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side: str):
        """Sets the side of this Order.

        Side. Possible values &ndash; \"buy\" and \"sell\".  # noqa: E501

        :param side: The side of this Order.
        :type side: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def type(self) -> str:
        """Gets the type of this Order.

        Type. Possible values &ndash; \"market\", \"stop\", \"limit\", \"stoplimit\".  # noqa: E501

        :return: The type of this Order.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Order.

        Type. Possible values &ndash; \"market\", \"stop\", \"limit\", \"stoplimit\".  # noqa: E501

        :param type: The type of this Order.
        :type type: str
        """
        allowed_values = ["market", "stop", "limit", "stoplimit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def filled_qty(self) -> float:
        """Gets the filled_qty of this Order.

        Filled quantity.  # noqa: E501

        :return: The filled_qty of this Order.
        :rtype: float
        """
        return self._filled_qty

    @filled_qty.setter
    def filled_qty(self, filled_qty: float):
        """Sets the filled_qty of this Order.

        Filled quantity.  # noqa: E501

        :param filled_qty: The filled_qty of this Order.
        :type filled_qty: float
        """

        self._filled_qty = filled_qty

    @property
    def avg_price(self) -> float:
        """Gets the avg_price of this Order.

        Average price of order fills. It should be provided for filled / partly filled orders.  # noqa: E501

        :return: The avg_price of this Order.
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price: float):
        """Sets the avg_price of this Order.

        Average price of order fills. It should be provided for filled / partly filled orders.  # noqa: E501

        :param avg_price: The avg_price of this Order.
        :type avg_price: float
        """

        self._avg_price = avg_price

    @property
    def limit_price(self) -> float:
        """Gets the limit_price of this Order.

        Limit Price for Limit or StopLimit order.  # noqa: E501

        :return: The limit_price of this Order.
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price: float):
        """Sets the limit_price of this Order.

        Limit Price for Limit or StopLimit order.  # noqa: E501

        :param limit_price: The limit_price of this Order.
        :type limit_price: float
        """

        self._limit_price = limit_price

    @property
    def stop_price(self) -> float:
        """Gets the stop_price of this Order.

        Stop Price for Stop or StopLimit order.  # noqa: E501

        :return: The stop_price of this Order.
        :rtype: float
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price: float):
        """Sets the stop_price of this Order.

        Stop Price for Stop or StopLimit order.  # noqa: E501

        :param stop_price: The stop_price of this Order.
        :type stop_price: float
        """

        self._stop_price = stop_price

    @property
    def parent_id(self) -> str:
        """Gets the parent_id of this Order.

        Identifier of a parent order or a parent position (for position brackets) depending on `parentType`. Should be set only for bracket orders.  # noqa: E501

        :return: The parent_id of this Order.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: str):
        """Sets the parent_id of this Order.

        Identifier of a parent order or a parent position (for position brackets) depending on `parentType`. Should be set only for bracket orders.  # noqa: E501

        :param parent_id: The parent_id of this Order.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def parent_type(self) -> str:
        """Gets the parent_type of this Order.

        Type of order's parent. Should be set only for bracket orders.  # noqa: E501

        :return: The parent_type of this Order.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type: str):
        """Sets the parent_type of this Order.

        Type of order's parent. Should be set only for bracket orders.  # noqa: E501

        :param parent_type: The parent_type of this Order.
        :type parent_type: str
        """
        allowed_values = ["order", "position"]  # noqa: E501
        if parent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type

    @property
    def duration(self) -> OrderDuration:
        """Gets the duration of this Order.


        :return: The duration of this Order.
        :rtype: OrderDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration: OrderDuration):
        """Sets the duration of this Order.


        :param duration: The duration of this Order.
        :type duration: OrderDuration
        """

        self._duration = duration

    @property
    def status(self) -> str:
        """Gets the status of this Order.

        String constants to describe an order status.  `Status`  | Description ----------|------------- placing   | order is not created on a broker's side yet inactive  | bracket order is created but waiting for a base order to be filled working   | order is created but not executed yet rejected  | order is rejected for some reason filled    | order is fully executed cancelled  | order is cancelled   # noqa: E501

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Order.

        String constants to describe an order status.  `Status`  | Description ----------|------------- placing   | order is not created on a broker's side yet inactive  | bracket order is created but waiting for a base order to be filled working   | order is created but not executed yet rejected  | order is rejected for some reason filled    | order is fully executed cancelled  | order is cancelled   # noqa: E501

        :param status: The status of this Order.
        :type status: str
        """
        allowed_values = ["placing", "inactive", "working", "rejected", "filled", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
