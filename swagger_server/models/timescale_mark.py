# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TimescaleMark(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, time: float=None, color: str=None, tooltip: str=None, label: str=None):  # noqa: E501
        """TimescaleMark - a model defined in Swagger

        :param id: The id of this TimescaleMark.  # noqa: E501
        :type id: str
        :param time: The time of this TimescaleMark.  # noqa: E501
        :type time: float
        :param color: The color of this TimescaleMark.  # noqa: E501
        :type color: str
        :param tooltip: The tooltip of this TimescaleMark.  # noqa: E501
        :type tooltip: str
        :param label: The label of this TimescaleMark.  # noqa: E501
        :type label: str
        """
        self.swagger_types = {
            'id': str,
            'time': float,
            'color': str,
            'tooltip': str,
            'label': str
        }

        self.attribute_map = {
            'id': 'id',
            'time': 'time',
            'color': 'color',
            'tooltip': 'tooltip',
            'label': 'label'
        }

        self._id = id
        self._time = time
        self._color = color
        self._tooltip = tooltip
        self._label = label

    @classmethod
    def from_dict(cls, dikt) -> 'TimescaleMark':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimescaleMark of this TimescaleMark.  # noqa: E501
        :rtype: TimescaleMark
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TimescaleMark.

        Unique identifier of marks.  # noqa: E501

        :return: The id of this TimescaleMark.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TimescaleMark.

        Unique identifier of marks.  # noqa: E501

        :param id: The id of this TimescaleMark.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def time(self) -> float:
        """Gets the time of this TimescaleMark.

        Bar time, unix timestamp (UTC).  # noqa: E501

        :return: The time of this TimescaleMark.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time: float):
        """Sets the time of this TimescaleMark.

        Bar time, unix timestamp (UTC).  # noqa: E501

        :param time: The time of this TimescaleMark.
        :type time: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def color(self) -> str:
        """Gets the color of this TimescaleMark.

        Mark color.  # noqa: E501

        :return: The color of this TimescaleMark.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this TimescaleMark.

        Mark color.  # noqa: E501

        :param color: The color of this TimescaleMark.
        :type color: str
        """
        allowed_values = ["red", "green", "blue", "yellow"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def tooltip(self) -> str:
        """Gets the tooltip of this TimescaleMark.

        Tooltip text.  # noqa: E501

        :return: The tooltip of this TimescaleMark.
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip: str):
        """Sets the tooltip of this TimescaleMark.

        Tooltip text.  # noqa: E501

        :param tooltip: The tooltip of this TimescaleMark.
        :type tooltip: str
        """

        self._tooltip = tooltip

    @property
    def label(self) -> str:
        """Gets the label of this TimescaleMark.

        A letter to be printed on a mark. Single character.  # noqa: E501

        :return: The label of this TimescaleMark.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this TimescaleMark.

        A letter to be printed on a mark. Single character.  # noqa: E501

        :param label: The label of this TimescaleMark.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label
