# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SymbolInfoArrays(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, symbol: List[str]=None, description: List[str]=None, exchange_listed: List[str]=None, exchange_traded: List[str]=None, minmovement: List[float]=None, minmov2: List[float]=None, fractional: List[bool]=None, pricescale: List[float]=None, has_intraday: List[bool]=None, has_no_volume: List[bool]=None, type: List[str]=None, ticker: List[str]=None, timezone: List[str]=None, session_regular: List[str]=None, supported_resolutions: List[List[str]]=None, has_daily: List[bool]=None, intraday_multipliers: List[List[str]]=None, has_weekly_and_monthly: List[bool]=None, pointvalue: List[float]=None, expiration: List[float]=None):  # noqa: E501
        """SymbolInfoArrays - a model defined in Swagger

        :param symbol: The symbol of this SymbolInfoArrays.  # noqa: E501
        :type symbol: List[str]
        :param description: The description of this SymbolInfoArrays.  # noqa: E501
        :type description: List[str]
        :param exchange_listed: The exchange_listed of this SymbolInfoArrays.  # noqa: E501
        :type exchange_listed: List[str]
        :param exchange_traded: The exchange_traded of this SymbolInfoArrays.  # noqa: E501
        :type exchange_traded: List[str]
        :param minmovement: The minmovement of this SymbolInfoArrays.  # noqa: E501
        :type minmovement: List[float]
        :param minmov2: The minmov2 of this SymbolInfoArrays.  # noqa: E501
        :type minmov2: List[float]
        :param fractional: The fractional of this SymbolInfoArrays.  # noqa: E501
        :type fractional: List[bool]
        :param pricescale: The pricescale of this SymbolInfoArrays.  # noqa: E501
        :type pricescale: List[float]
        :param has_intraday: The has_intraday of this SymbolInfoArrays.  # noqa: E501
        :type has_intraday: List[bool]
        :param has_no_volume: The has_no_volume of this SymbolInfoArrays.  # noqa: E501
        :type has_no_volume: List[bool]
        :param type: The type of this SymbolInfoArrays.  # noqa: E501
        :type type: List[str]
        :param ticker: The ticker of this SymbolInfoArrays.  # noqa: E501
        :type ticker: List[str]
        :param timezone: The timezone of this SymbolInfoArrays.  # noqa: E501
        :type timezone: List[str]
        :param session_regular: The session_regular of this SymbolInfoArrays.  # noqa: E501
        :type session_regular: List[str]
        :param supported_resolutions: The supported_resolutions of this SymbolInfoArrays.  # noqa: E501
        :type supported_resolutions: List[List[str]]
        :param has_daily: The has_daily of this SymbolInfoArrays.  # noqa: E501
        :type has_daily: List[bool]
        :param intraday_multipliers: The intraday_multipliers of this SymbolInfoArrays.  # noqa: E501
        :type intraday_multipliers: List[List[str]]
        :param has_weekly_and_monthly: The has_weekly_and_monthly of this SymbolInfoArrays.  # noqa: E501
        :type has_weekly_and_monthly: List[bool]
        :param pointvalue: The pointvalue of this SymbolInfoArrays.  # noqa: E501
        :type pointvalue: List[float]
        :param expiration: The expiration of this SymbolInfoArrays.  # noqa: E501
        :type expiration: List[float]
        """
        self.swagger_types = {
            'symbol': List[str],
            'description': List[str],
            'exchange_listed': List[str],
            'exchange_traded': List[str],
            'minmovement': List[float],
            'minmov2': List[float],
            'fractional': List[bool],
            'pricescale': List[float],
            'has_intraday': List[bool],
            'has_no_volume': List[bool],
            'type': List[str],
            'ticker': List[str],
            'timezone': List[str],
            'session_regular': List[str],
            'supported_resolutions': List[List[str]],
            'has_daily': List[bool],
            'intraday_multipliers': List[List[str]],
            'has_weekly_and_monthly': List[bool],
            'pointvalue': List[float],
            'expiration': List[float]
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'description': 'description',
            'exchange_listed': 'exchange-listed',
            'exchange_traded': 'exchange-traded',
            'minmovement': 'minmovement',
            'minmov2': 'minmov2',
            'fractional': 'fractional',
            'pricescale': 'pricescale',
            'has_intraday': 'has-intraday',
            'has_no_volume': 'has-no-volume',
            'type': 'type',
            'ticker': 'ticker',
            'timezone': 'timezone',
            'session_regular': 'session-regular',
            'supported_resolutions': 'supported-resolutions',
            'has_daily': 'has-daily',
            'intraday_multipliers': 'intraday-multipliers',
            'has_weekly_and_monthly': 'has-weekly-and-monthly',
            'pointvalue': 'pointvalue',
            'expiration': 'expiration'
        }

        self._symbol = symbol
        self._description = description
        self._exchange_listed = exchange_listed
        self._exchange_traded = exchange_traded
        self._minmovement = minmovement
        self._minmov2 = minmov2
        self._fractional = fractional
        self._pricescale = pricescale
        self._has_intraday = has_intraday
        self._has_no_volume = has_no_volume
        self._type = type
        self._ticker = ticker
        self._timezone = timezone
        self._session_regular = session_regular
        self._supported_resolutions = supported_resolutions
        self._has_daily = has_daily
        self._intraday_multipliers = intraday_multipliers
        self._has_weekly_and_monthly = has_weekly_and_monthly
        self._pointvalue = pointvalue
        self._expiration = expiration

    @classmethod
    def from_dict(cls, dikt) -> 'SymbolInfoArrays':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SymbolInfoArrays of this SymbolInfoArrays.  # noqa: E501
        :rtype: SymbolInfoArrays
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> List[str]:
        """Gets the symbol of this SymbolInfoArrays.

        It's the name of the symbol. It is a string that your users will be able to see. Also, it will be used for data requests if you are not using tickers.  # noqa: E501

        :return: The symbol of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: List[str]):
        """Sets the symbol of this SymbolInfoArrays.

        It's the name of the symbol. It is a string that your users will be able to see. Also, it will be used for data requests if you are not using tickers.  # noqa: E501

        :param symbol: The symbol of this SymbolInfoArrays.
        :type symbol: List[str]
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def description(self) -> List[str]:
        """Gets the description of this SymbolInfoArrays.

        Description of a symbol. Will be displayed in the chart legend for this symbol.  # noqa: E501

        :return: The description of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description: List[str]):
        """Sets the description of this SymbolInfoArrays.

        Description of a symbol. Will be displayed in the chart legend for this symbol.  # noqa: E501

        :param description: The description of this SymbolInfoArrays.
        :type description: List[str]
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def exchange_listed(self) -> List[str]:
        """Gets the exchange_listed of this SymbolInfoArrays.

        Short name of exchange where this symbol is listed.  # noqa: E501

        :return: The exchange_listed of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._exchange_listed

    @exchange_listed.setter
    def exchange_listed(self, exchange_listed: List[str]):
        """Sets the exchange_listed of this SymbolInfoArrays.

        Short name of exchange where this symbol is listed.  # noqa: E501

        :param exchange_listed: The exchange_listed of this SymbolInfoArrays.
        :type exchange_listed: List[str]
        """
        if exchange_listed is None:
            raise ValueError("Invalid value for `exchange_listed`, must not be `None`")  # noqa: E501

        self._exchange_listed = exchange_listed

    @property
    def exchange_traded(self) -> List[str]:
        """Gets the exchange_traded of this SymbolInfoArrays.

        Short name of exchange where this symbol is traded.  # noqa: E501

        :return: The exchange_traded of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._exchange_traded

    @exchange_traded.setter
    def exchange_traded(self, exchange_traded: List[str]):
        """Sets the exchange_traded of this SymbolInfoArrays.

        Short name of exchange where this symbol is traded.  # noqa: E501

        :param exchange_traded: The exchange_traded of this SymbolInfoArrays.
        :type exchange_traded: List[str]
        """
        if exchange_traded is None:
            raise ValueError("Invalid value for `exchange_traded`, must not be `None`")  # noqa: E501

        self._exchange_traded = exchange_traded

    @property
    def minmovement(self) -> List[float]:
        """Gets the minmovement of this SymbolInfoArrays.

        Minimal integer price change.  # noqa: E501

        :return: The minmovement of this SymbolInfoArrays.
        :rtype: List[float]
        """
        return self._minmovement

    @minmovement.setter
    def minmovement(self, minmovement: List[float]):
        """Sets the minmovement of this SymbolInfoArrays.

        Minimal integer price change.  # noqa: E501

        :param minmovement: The minmovement of this SymbolInfoArrays.
        :type minmovement: List[float]
        """
        if minmovement is None:
            raise ValueError("Invalid value for `minmovement`, must not be `None`")  # noqa: E501

        self._minmovement = minmovement

    @property
    def minmov2(self) -> List[float]:
        """Gets the minmov2 of this SymbolInfoArrays.

        It's a number for complex price formatting cases.  # noqa: E501

        :return: The minmov2 of this SymbolInfoArrays.
        :rtype: List[float]
        """
        return self._minmov2

    @minmov2.setter
    def minmov2(self, minmov2: List[float]):
        """Sets the minmov2 of this SymbolInfoArrays.

        It's a number for complex price formatting cases.  # noqa: E501

        :param minmov2: The minmov2 of this SymbolInfoArrays.
        :type minmov2: List[float]
        """

        self._minmov2 = minmov2

    @property
    def fractional(self) -> List[bool]:
        """Gets the fractional of this SymbolInfoArrays.

        Boolean showing whether this symbol wants to have complex price formatting (see minmov2) or not.  # noqa: E501

        :return: The fractional of this SymbolInfoArrays.
        :rtype: List[bool]
        """
        return self._fractional

    @fractional.setter
    def fractional(self, fractional: List[bool]):
        """Sets the fractional of this SymbolInfoArrays.

        Boolean showing whether this symbol wants to have complex price formatting (see minmov2) or not.  # noqa: E501

        :param fractional: The fractional of this SymbolInfoArrays.
        :type fractional: List[bool]
        """

        self._fractional = fractional

    @property
    def pricescale(self) -> List[float]:
        """Gets the pricescale of this SymbolInfoArrays.

        MinimalPossiblePriceChange = minmovement / pricescale.  # noqa: E501

        :return: The pricescale of this SymbolInfoArrays.
        :rtype: List[float]
        """
        return self._pricescale

    @pricescale.setter
    def pricescale(self, pricescale: List[float]):
        """Sets the pricescale of this SymbolInfoArrays.

        MinimalPossiblePriceChange = minmovement / pricescale.  # noqa: E501

        :param pricescale: The pricescale of this SymbolInfoArrays.
        :type pricescale: List[float]
        """
        if pricescale is None:
            raise ValueError("Invalid value for `pricescale`, must not be `None`")  # noqa: E501

        self._pricescale = pricescale

    @property
    def has_intraday(self) -> List[bool]:
        """Gets the has_intraday of this SymbolInfoArrays.

        Boolean value showing whether the symbol includes intraday (minutes) historical data. If it's false then all buttons for intraday resolutions will be disabled for this particular symbol. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.  # noqa: E501

        :return: The has_intraday of this SymbolInfoArrays.
        :rtype: List[bool]
        """
        return self._has_intraday

    @has_intraday.setter
    def has_intraday(self, has_intraday: List[bool]):
        """Sets the has_intraday of this SymbolInfoArrays.

        Boolean value showing whether the symbol includes intraday (minutes) historical data. If it's false then all buttons for intraday resolutions will be disabled for this particular symbol. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.  # noqa: E501

        :param has_intraday: The has_intraday of this SymbolInfoArrays.
        :type has_intraday: List[bool]
        """

        self._has_intraday = has_intraday

    @property
    def has_no_volume(self) -> List[bool]:
        """Gets the has_no_volume of this SymbolInfoArrays.

        Boolean showing whether the symbol includes volume data or not.  # noqa: E501

        :return: The has_no_volume of this SymbolInfoArrays.
        :rtype: List[bool]
        """
        return self._has_no_volume

    @has_no_volume.setter
    def has_no_volume(self, has_no_volume: List[bool]):
        """Sets the has_no_volume of this SymbolInfoArrays.

        Boolean showing whether the symbol includes volume data or not.  # noqa: E501

        :param has_no_volume: The has_no_volume of this SymbolInfoArrays.
        :type has_no_volume: List[bool]
        """

        self._has_no_volume = has_no_volume

    @property
    def type(self) -> List[str]:
        """Gets the type of this SymbolInfoArrays.

        Symbol type (forex/stock etc.).  # noqa: E501

        :return: The type of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type: List[str]):
        """Sets the type of this SymbolInfoArrays.

        Symbol type (forex/stock etc.).  # noqa: E501

        :param type: The type of this SymbolInfoArrays.
        :type type: List[str]
        """

        self._type = type

    @property
    def ticker(self) -> List[str]:
        """Gets the ticker of this SymbolInfoArrays.

        It's an unique identifier for this particular symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker will be treated the same as symbol if not specified explicitly.  # noqa: E501

        :return: The ticker of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: List[str]):
        """Sets the ticker of this SymbolInfoArrays.

        It's an unique identifier for this particular symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker will be treated the same as symbol if not specified explicitly.  # noqa: E501

        :param ticker: The ticker of this SymbolInfoArrays.
        :type ticker: List[str]
        """

        self._ticker = ticker

    @property
    def timezone(self) -> List[str]:
        """Gets the timezone of this SymbolInfoArrays.

        Timezone of the exchange for this symbol. We expect to get the name of the time zone in olsondb format.  # noqa: E501

        :return: The timezone of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: List[str]):
        """Sets the timezone of this SymbolInfoArrays.

        Timezone of the exchange for this symbol. We expect to get the name of the time zone in olsondb format.  # noqa: E501

        :param timezone: The timezone of this SymbolInfoArrays.
        :type timezone: List[str]
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def session_regular(self) -> List[str]:
        """Gets the session_regular of this SymbolInfoArrays.

        Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.  # noqa: E501

        :return: The session_regular of this SymbolInfoArrays.
        :rtype: List[str]
        """
        return self._session_regular

    @session_regular.setter
    def session_regular(self, session_regular: List[str]):
        """Sets the session_regular of this SymbolInfoArrays.

        Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.  # noqa: E501

        :param session_regular: The session_regular of this SymbolInfoArrays.
        :type session_regular: List[str]
        """
        if session_regular is None:
            raise ValueError("Invalid value for `session_regular`, must not be `None`")  # noqa: E501

        self._session_regular = session_regular

    @property
    def supported_resolutions(self) -> List[List[str]]:
        """Gets the supported_resolutions of this SymbolInfoArrays.

        An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.  # noqa: E501

        :return: The supported_resolutions of this SymbolInfoArrays.
        :rtype: List[List[str]]
        """
        return self._supported_resolutions

    @supported_resolutions.setter
    def supported_resolutions(self, supported_resolutions: List[List[str]]):
        """Sets the supported_resolutions of this SymbolInfoArrays.

        An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.  # noqa: E501

        :param supported_resolutions: The supported_resolutions of this SymbolInfoArrays.
        :type supported_resolutions: List[List[str]]
        """

        self._supported_resolutions = supported_resolutions

    @property
    def has_daily(self) -> List[bool]:
        """Gets the has_daily of this SymbolInfoArrays.

        The boolean value showing whether data feed has its own daily resolution bars or not. If has_daily = false then Charting Library will build the respective resolutions using 1-minute bars by itself. If not, then it will request those bars from the data feed.  # noqa: E501

        :return: The has_daily of this SymbolInfoArrays.
        :rtype: List[bool]
        """
        return self._has_daily

    @has_daily.setter
    def has_daily(self, has_daily: List[bool]):
        """Sets the has_daily of this SymbolInfoArrays.

        The boolean value showing whether data feed has its own daily resolution bars or not. If has_daily = false then Charting Library will build the respective resolutions using 1-minute bars by itself. If not, then it will request those bars from the data feed.  # noqa: E501

        :param has_daily: The has_daily of this SymbolInfoArrays.
        :type has_daily: List[bool]
        """

        self._has_daily = has_daily

    @property
    def intraday_multipliers(self) -> List[List[str]]:
        """Gets the intraday_multipliers of this SymbolInfoArrays.

        It is an array containing intraday resolutions (in minutes) that the data feed may provide. E.g., if the data feed supports resolutions such as [\"1\", \"5\", \"15\"], but has 1-minute bars for some symbols then you should set intraday_multipliers of this symbol to [1]. This will make Charting Library build 5 and 15-minute resolutions by itself.  # noqa: E501

        :return: The intraday_multipliers of this SymbolInfoArrays.
        :rtype: List[List[str]]
        """
        return self._intraday_multipliers

    @intraday_multipliers.setter
    def intraday_multipliers(self, intraday_multipliers: List[List[str]]):
        """Sets the intraday_multipliers of this SymbolInfoArrays.

        It is an array containing intraday resolutions (in minutes) that the data feed may provide. E.g., if the data feed supports resolutions such as [\"1\", \"5\", \"15\"], but has 1-minute bars for some symbols then you should set intraday_multipliers of this symbol to [1]. This will make Charting Library build 5 and 15-minute resolutions by itself.  # noqa: E501

        :param intraday_multipliers: The intraday_multipliers of this SymbolInfoArrays.
        :type intraday_multipliers: List[List[str]]
        """

        self._intraday_multipliers = intraday_multipliers

    @property
    def has_weekly_and_monthly(self) -> List[bool]:
        """Gets the has_weekly_and_monthly of this SymbolInfoArrays.

        The boolean value showing whether data feed has its own weekly and monthly resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build the respective resolutions using daily bars by itself. If not, then it will request those bars from the data feed.  # noqa: E501

        :return: The has_weekly_and_monthly of this SymbolInfoArrays.
        :rtype: List[bool]
        """
        return self._has_weekly_and_monthly

    @has_weekly_and_monthly.setter
    def has_weekly_and_monthly(self, has_weekly_and_monthly: List[bool]):
        """Sets the has_weekly_and_monthly of this SymbolInfoArrays.

        The boolean value showing whether data feed has its own weekly and monthly resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build the respective resolutions using daily bars by itself. If not, then it will request those bars from the data feed.  # noqa: E501

        :param has_weekly_and_monthly: The has_weekly_and_monthly of this SymbolInfoArrays.
        :type has_weekly_and_monthly: List[bool]
        """

        self._has_weekly_and_monthly = has_weekly_and_monthly

    @property
    def pointvalue(self) -> List[float]:
        """Gets the pointvalue of this SymbolInfoArrays.

        Big Point Value. If the value is not provided it is assumed to be 1.  # noqa: E501

        :return: The pointvalue of this SymbolInfoArrays.
        :rtype: List[float]
        """
        return self._pointvalue

    @pointvalue.setter
    def pointvalue(self, pointvalue: List[float]):
        """Sets the pointvalue of this SymbolInfoArrays.

        Big Point Value. If the value is not provided it is assumed to be 1.  # noqa: E501

        :param pointvalue: The pointvalue of this SymbolInfoArrays.
        :type pointvalue: List[float]
        """

        self._pointvalue = pointvalue

    @property
    def expiration(self) -> List[float]:
        """Gets the expiration of this SymbolInfoArrays.

        Expiration of the futures in the following format: YYYYMMDD.  # noqa: E501

        :return: The expiration of this SymbolInfoArrays.
        :rtype: List[float]
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration: List[float]):
        """Sets the expiration of this SymbolInfoArrays.

        Expiration of the futures in the following format: YYYYMMDD.  # noqa: E501

        :param expiration: The expiration of this SymbolInfoArrays.
        :type expiration: List[float]
        """

        self._expiration = expiration
